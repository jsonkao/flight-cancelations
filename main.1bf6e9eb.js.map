{"version":3,"sources":["airports.json","node_modules/d3-array/src/ascending.js","node_modules/d3-array/src/bisector.js","node_modules/d3-array/src/bisect.js","node_modules/d3-array/src/count.js","node_modules/d3-array/src/cross.js","node_modules/d3-array/src/cumsum.js","node_modules/d3-array/src/descending.js","node_modules/d3-array/src/variance.js","node_modules/d3-array/src/deviation.js","node_modules/d3-array/src/extent.js","node_modules/d3-array/src/identity.js","node_modules/d3-array/src/group.js","node_modules/d3-array/src/array.js","node_modules/d3-array/src/constant.js","node_modules/d3-array/src/range.js","node_modules/d3-array/src/ticks.js","node_modules/d3-array/src/threshold/sturges.js","node_modules/d3-array/src/bin.js","node_modules/d3-array/src/max.js","node_modules/d3-array/src/min.js","node_modules/d3-array/src/quickselect.js","node_modules/d3-array/src/number.js","node_modules/d3-array/src/quantile.js","node_modules/d3-array/src/threshold/freedmanDiaconis.js","node_modules/d3-array/src/threshold/scott.js","node_modules/d3-array/src/maxIndex.js","node_modules/d3-array/src/mean.js","node_modules/d3-array/src/median.js","node_modules/d3-array/src/merge.js","node_modules/d3-array/src/minIndex.js","node_modules/d3-array/src/pairs.js","node_modules/d3-array/src/permute.js","node_modules/d3-array/src/least.js","node_modules/d3-array/src/leastIndex.js","node_modules/d3-array/src/greatest.js","node_modules/d3-array/src/greatestIndex.js","node_modules/d3-array/src/scan.js","node_modules/d3-array/src/shuffle.js","node_modules/d3-array/src/sum.js","node_modules/d3-array/src/transpose.js","node_modules/d3-array/src/zip.js","node_modules/d3-array/src/index.js","vertices.js","shaders/points.frag","shaders/points.vert","shaders/borders.frag","shaders/borders.vert","shaders/texture.frag","shaders/texture.vert","main.js"],"names":["module","exports","a","b","NaN","compare","length","ascendingComparator","left","x","lo","hi","mid","right","f","d","bisectRight","ascendingBisect","ascending","bisectLeft","count","values","valueof","undefined","value","index","array","empty","arrayify","Array","from","reducer","reduce","cross","pop","lengths","map","j","fill","product","some","push","i","cumsum","sum","Float64Array","v","variance","delta","mean","deviation","Math","sqrt","min","max","group","keys","nest","identity","groups","rollup","rollups","regroup","Map","keyof","key","get","set","prototype","slice","start","stop","step","n","arguments","ceil","range","e10","e5","e2","reverse","ticks","tickIncrement","isFinite","floor","power","log","LN10","error","pow","tickStep","step0","abs","step1","LN2","domain","extent","threshold","sturges","histogram","data","isArray","xz","x0","x1","tz","m","shift","bins","bin","_","thresholds","call","quickselect","k","z","s","exp","sd","t","swap","numbers","quantile","p","i0","value0","subarray","quantileSorted","number","maxIndex","flatten","arrays","merge","minIndex","pairs","pairof","pair","previous","first","source","least","defined","minValue","element","leastIndex","greatest","maxValue","greatestIndex","scan","shuffle","i1","random","matrix","transpose","row","project","lon","lat","azimuth","PI","inclination","sin","cos","y","Float32Array","compute_flight_paths","buffer","Uint16Array","vertices","from_lon","from_lat","from_china","airports","to_lon","to_lat","to_china","fromChina","forEach","compute_vertices","Uint32Array","indices","coords","len","console","regl","base","getVertices","fetch","then","response","arrayBuffer","getTexture","filename","Promise","resolve","image","Image","src","crossOrigin","onload","texture","flipY","createLineDrawer","frag","borderFrag","vert","borderVert","uniforms","aspectRatio","attributes","position","primitive","main","borders","landTexture","monoTexture","flights","all","spec","mono","getFlights","drawBorders","drawFlights","pointsFrag","pointsVert","drawTexture","textureFrag","textureVert","tick","prop","frame","clear","color","depth","viewportWidth","viewportHeight","ar","catch"],"mappings":";;;;;AAAAA,OAAOC,QAAQ,CAAC,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,KAAK,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,OAAO,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,MAAM,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,MAAM,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,MAAM,GAAG,CAAC,SAAS,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,EAAE,MAAM,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,CAAC,SAAS,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,EAAE,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,EAAE,QAAQ,QAAQ,GAAG,CAAC,OAAO,KAAK,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,CAAC,OAAO,QAAQ,GAAG,EAAE,QAAQ,MAAM,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,MAAM,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,QAAQ,QAAQ,GAAG,CAAC,SAAS,QAAQ,GAAG,EAAE,OAAO,QAAQ,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,OAAO,GAAG,CAAC,QAAQ,QAA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","file":"main.1bf6e9eb.js","sourceRoot":"..","sourcesContent":["module.exports=[[116.585,40.0801,0],[28.8146,40.9769,0],[121.805,31.1434,1],[-79.6306,43.6772,0],[-73.7408,45.4706,0],[121.336,31.1979,1],[120.374,36.2661,1],[106.3327,27.8164,1],[-118.408,33.9425,0],[-73.7789,40.6398,0],[114.208,30.7838,1],[113.299,23.3924,1],[-77.4558,38.9445,0],[151.177,-33.9461,0],[123.483,41.6398,1],[118.8736,34.5717,1],[103.947,30.5785,1],[117.216,36.8572,1],[-122.375,37.619,0],[120.9872,37.6572,1],[38.7993,8.9779,0],[51.1522,35.4161,0],[113.811,22.6393,1],[102.9292,25.1019,1],[55.3644,25.2528,0],[113.22,28.1892,1],[73.5291,4.1918,0],[28.7519,41.2753,0],[-89.9767,35.0424,0],[31.4056,30.1219,0],[136.407,36.3946,0],[54.6511,24.433,0],[103.994,1.3502,0],[8.5706,50.0333,0],[120.434,30.2295,1],[51.6081,25.2731,0],[108.752,34.4471,1],[138.531,-34.945,0],[2.55,49.0128,0],[103.62,36.5152,1],[109.294,21.5394,1],[-123.184,49.1939,0],[174.792,-37.0081,0],[12.2389,41.8003,0],[119.663,25.9351,1],[4.7639,52.3086,0],[79.8841,7.1808,0],[11.6903,48.1378,0],[50.0467,40.4675,0],[172.532,-43.4894,0],[153.117,-27.3842,0],[144.843,-37.6733,0],[106.642,29.7192,1],[113.841,34.5197,1],[-3.5626,40.4719,0],[122.362,29.9342,1],[-9.1359,38.7813,0],[37.4146,55.9726,0],[24.9633,60.3172,0],[16.5697,48.1103,0],[2.0785,41.2971,0],[-.1903,51.1481,0],[110.459,19.9349,1],[130.2706,30.7847,0],[8.7281,45.6306,0],[101.71,2.7456,0],[4.4844,50.9014,0],[109.412,18.3029,1],[-2.275,53.3537,0],[126.25,45.6234,1],[60.8027,56.7431,0],[6.109,46.2381,0],[44.2346,33.2625,0],[92.4933,56.1729,0],[103.813,13.4107,0],[77.0405,43.3521,0],[82.6507,55.0126,0],[71.4669,51.0222,0],[103.637,10.5797,0],[114.1981,22.3203,0],[-149.996,61.1744,0],[117.346,39.1244,1],[98.3169,8.1132,0],[135.244,34.4273,0],[140.386,35.7647,0],[6.2044,49.6233,0],[100.747,13.6811,0],[88.4467,22.6547,0],[104.389,52.268,0],[127.412,50.4254,0],[72.8679,19.0887,0],[124.926,1.5493,0],[77.1031,28.5665,0],[122.376,11.6794,0],[90.3978,23.8433,0],[118.862,31.742,1],[7.1427,50.8659,0],[100.062,9.5478,0],[100.607,13.9126,0],[5.4432,50.6374,0],[115.9,28.865,1],[74.4776,43.0613,0],[136.805,34.8584,0],[56.0212,57.9145,0],[98.9626,18.7668,0],[104.844,11.5466,0],[113.376,22.0064,1],[112.388,34.7411,1],[80.1693,12.99,0],[116.4109,39.5099,1],[12.2364,51.4239,0],[127.4987,36.717,0],[118.128,24.544,1],[119.3244,35.405,1],[125.685,43.9962,1],[114.928,4.9442,0],[114.697,38.2807,1],[104.741,31.4281,1],[106.801,26.5385,1],[112.628,37.7469,1],[102.184,27.9891,1],[121.02,14.5086,0],[120.852,27.9122,1],[120.032,29.3447,1],[129.569,44.5241,1],[100.76,21.9739,1],[119.779,31.9197,1],[100.319,25.6494,1],[118.59,24.7964,1],[116.5033,23.552,1],[86.1289,41.6978,1],[121.539,38.9657,1],[106.3932,38.3228,1],[112.628,26.9053,1],[118.001,27.7019,1],[119.7198,32.5634,1],[109.485,30.3203,1],[120.429,31.4944,1],[117.298,31.78,1],[120.2031,33.4258,1],[114.93,40.7386,1],[121.462,29.8267,1],[127.6022,42.0669,1],[87.4742,43.9071,1],[102.043,36.5275,1],[108.172,22.6083,1],[111.824,40.8514,1],[105.393,28.8522,1],[114.3062,27.8025,1],[118.908,42.235,1],[109.391,24.2075,1],[117.5553,34.0591,1],[110.358,21.2144,1],[57.6836,-20.4302,0],[111.6412,36.1326,1],[114.6,23.05,1],[106.1626,30.7954,1],[117.6856,30.7403,1],[105.702,32.3911,1],[79.8649,37.0385,1],[107.603,35.7997,1],[58.2844,23.5933,0],[114.7789,25.8533,1],[111.48,30.5566,1],[118.899,28.9658,1],[119.825,49.205,1],[115.167,-8.7482,0],[100.246,26.68,1],[105.1545,37.5731,1],[113.278,29.314,1],[106.652,10.8188,0],[104.545,28.8006,1],[118.412,35.0461,1],[115.7344,32.8822,1],[105.86,34.5594,1],[84.9527,45.4665,1],[55.8744,54.5575,0],[101.7985,26.54,1],[117.05,30.5822,1],[110.039,25.2181,1],[107.0007,27.5895,1],[98.5317,24.4011,1],[112.9692,38.5975,1],[110.443,29.1028,1],[112.291,32.1506,1],[122.229,37.1871,1],[111.64,28.9189,1],[113.482,40.0603,1],[119.119,36.6467,1],[118.256,29.7333,1],[120.976,32.0708,1],[108.433,30.8017,1],[140.415,36.1811,0],[119.125,33.7908,1],[109.8614,39.49,1],[107.206,33.1341,1],[99.1683,25.0533,1],[117.8336,26.4263,1],[106.7993,39.7934,1],[105.5886,38.7483,1],[109.5909,38.3597,1],[109.554,36.6369,1],[119.0589,39.6664,1],[122.854,41.1053,1],[111.0314,35.1164,1],[114.737,26.8569,1],[109.3089,27.8833,1],[129.451,42.8828,1],[117.9643,28.3797,1],[118.788,37.5086,1],[121.233,25.0777,0],[104.9594,25.0864,1],[107.4295,31.1302,1],[126.493,33.5113,0],[120.56,15.186,0],[98.4858,24.9381,1],[113.07,23.0833,1],[114.0791,32.5408,1],[94.3353,29.3033,1],[110.4548,19.1382,1],[131.193,45.293,1],[99.3736,23.2739,1],[80.2917,41.2625,1],[90.9119,29.2978,1],[55.1614,24.8964,0],[117.33,49.5667,1],[113.592,22.1496,0],[95.9779,21.7022,0],[117.176,29.3386,1],[81.3303,43.9558,1],[121.429,28.5622,1],[112.615,32.9808,1],[100.7593,27.5403,1],[106.2169,36.0789,1],[113.126,36.2475,1],[123.918,47.2396,1],[121.062,41.1014,1],[93.6692,42.8414,1],[110.642,26.802,1],[141.692,42.7752,0],[126.451,37.4691,0],[125.1406,46.7464,1],[106.6449,31.7384,1],[76.02,39.5429,1],[82.8729,41.6779,1],[116.133,24.35,1],[111.248,23.4567,1],[105.807,21.2212,0],[127.646,26.1958,0],[105.8733,26.2606,1],[111.1428,37.6833,1],[118.0026,39.7178,1],[122.0083,46.1953,1],[109.219,11.9982,0],[126.791,37.5583,0],[102.3483,38.5422,1],[100.3011,34.4181,1],[106.767,47.8431,0],[110.9078,32.5917,1],[106.656,-6.1256,0],[122.7675,47.8658,1],[106.96,23.7206,1],[145.729,15.119,0],[128.6553,35.8969,0],[139.78,35.5523,0],[100.959,22.7933,1],[109.7,27.4411,1],[85.3591,27.6966,0],[105.4721,27.2671,1],[99.8829,19.9523,0],[100.025,23.7381,1],[138.1878,34.796,0],[99.7864,22.4158,1],[128.938,35.1795,0],[118.0739,41.1225,1],[108.8311,29.5133,1],[102.563,17.9883,0],[112.0967,43.4225,1],[96.1332,16.9073,0],[134.016,34.2142,0],[103.755,27.3256,1],[109.997,40.56,1],[107.7428,40.926,1],[121.552,25.0694,0],[115.964,43.9156,1],[89.0987,43.0308,1],[116.051,5.9372,0],[-.4619,51.4706,0],[105.797,33.788,1],[-95.3414,29.9844,0],[74.4036,31.5216,0],[122.3586,40.5425,1],[99.5543,31.7574,1],[123.0197,45.5053,1],[130.465,46.8434,1],[122.2,43.5567,1],[100.0533,29.3231,1],[113.1081,41.1297,1],[94.8092,40.1611,1],[120.35,22.5771,0],[130.451,33.5859,0],[98.3414,39.8569,1],[8.5492,47.4647,0],[132.6603,47.11,1],[89.3114,29.3519,1],[99.6772,27.7936,1],[102.3522,32.5315,1],[116.747,25.6747,1],[134.3664,48.1995,1],[113.306,52.0263,0],[116.3467,35.2928,1],[127.3089,50.1716,1],[97.0364,32.8364,1],[123.979,10.3075,0],[98.9862,8.0991,0],[129.0191,47.7521,1],[131.737,33.4794,0],[88.0858,47.7499,1],[-74.1687,40.6925,0],[126.133,48.445,1],[101.005,12.6799,0],[-83.3534,42.2124,0],[100.675,38.8019,1],[124.286,40.0247,1],[125.7033,42.2539,1],[97.1083,30.5536,1],[-87.9048,41.9786,0],[-84.4281,33.6367,0],[-122.309,47.449,0],[94.7861,36.4006,1],[104.979,26.6094,1],[-71.0052,42.3643,0],[114.35,30.7,1],[104.3255,23.5583,1],[120.435,41.5381,1],[108.199,16.0439,0],[112.345,16.8336,1],[126.3828,34.9914,0],[114.4256,36.5258,1],[12.656,55.6179,0],[-122.302,47.53,0],[102.161,19.8973,0],[46.6988,24.9576,0],[19.2611,47.4298,0],[17.9186,59.6519,0],[88.0083,38.9747,1],[77.0752,38.2811,1],[14.26,50.1008,0],[116.388,39.7828,1],[20.9671,52.1657,0],[100.277,5.2971,0],[133.855,34.7569,0],[120.621,24.2647,0],[132.919,34.4361,0],[103.9931,10.1698,0],[-97.038,32.8968,0],[101.549,3.1306,0],[107.988,26.972,1],[44.9547,41.6692,0],[-157.9242,21.3206,0],[103.6822,32.8533,1],[106.725,20.8194,0],[34.8867,32.0114,0],[145.755,-16.8858,0],[36.9278,-1.3192,0],[28.246,-26.1392,0],[69.2812,41.2579,0],[99.7287,6.3297,0],[142.718,46.8887,0],[.235,51.885,0],[115.967,-31.9403,0],[130.877,-12.4147,0],[104.119,1.121,0],[132.148,43.399,0],[103.67,1.6413,0],[123.8535,9.6654,0],[37.9063,55.4088,0],[37.2615,55.5915,0],[49.2787,55.6062,0],[30.8947,50.345,0],[130.302,33.1497,0],[119.9117,47.3106,1],[109.706,31.064,1]];","export default function(a, b) {\n  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function(compare) {\n  if (compare.length === 1) compare = ascendingComparator(compare);\n  return {\n    left: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) < 0) lo = mid + 1;\n        else hi = mid;\n      }\n      return lo;\n    },\n    right: function(a, x, lo, hi) {\n      if (lo == null) lo = 0;\n      if (hi == null) hi = a.length;\n      while (lo < hi) {\n        var mid = lo + hi >>> 1;\n        if (compare(a[mid], x) > 0) hi = mid;\n        else lo = mid + 1;\n      }\n      return lo;\n    }\n  };\n}\n\nfunction ascendingComparator(f) {\n  return function(d, x) {\n    return ascending(f(d), x);\n  };\n}\n","import ascending from \"./ascending.js\";\nimport bisector from \"./bisector.js\";\n\nvar ascendingBisect = bisector(ascending);\nexport var bisectRight = ascendingBisect.right;\nexport var bisectLeft = ascendingBisect.left;\nexport default bisectRight;\n","export default function count(values, valueof) {\n  let count = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count;\n      }\n    }\n  }\n  return count;\n}\n","function length(array) {\n  return array.length | 0;\n}\n\nfunction empty(length) {\n  return !(length > 0);\n}\n\nfunction arrayify(values) {\n  return typeof values !== \"object\" || \"length\" in values ? values : Array.from(values);\n}\n\nfunction reducer(reduce) {\n  return values => reduce(...values);\n}\n\nexport default function cross(...values) {\n  const reduce = typeof values[values.length - 1] === \"function\" && reducer(values.pop());\n  values = values.map(arrayify);\n  const lengths = values.map(length);\n  const j = values.length - 1;\n  const index = new Array(j + 1).fill(0);\n  const product = [];\n  if (j < 0 || lengths.some(empty)) return product;\n  while (true) {\n    product.push(index.map((j, i) => values[i][j]));\n    let i = j;\n    while (++index[i] === lengths[i]) {\n      if (i === 0) return reduce ? product.map(reduce) : product;\n      index[i--] = 0;\n    }\n  }\n}\n","export default function cumsum(values, valueof) {\n  var sum = 0, index = 0;\n  return Float64Array.from(values, valueof === undefined\n    ? v => (sum += +v || 0)\n    : v => (sum += +valueof(v, index++, values) || 0));\n}","export default function(a, b) {\n  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;\n}\n","export default function variance(values, valueof) {\n  let count = 0;\n  let delta;\n  let mean = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        delta = value - mean;\n        mean += delta / ++count;\n        sum += delta * (value - mean);\n      }\n    }\n  }\n  if (count > 1) return sum / (count - 1);\n}\n","import variance from \"./variance.js\";\n\nexport default function deviation(values, valueof) {\n  const v = variance(values, valueof);\n  return v ? Math.sqrt(v) : v;\n}\n","export default function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new Map();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n","var array = Array.prototype;\n\nexport var slice = array.slice;\nexport var map = array.map;\n","export default function(x) {\n  return function() {\n    return x;\n  };\n}\n","export default function(start, stop, step) {\n  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;\n\n  var i = -1,\n      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,\n      range = new Array(n);\n\n  while (++i < n) {\n    range[i] = start + i * step;\n  }\n\n  return range;\n}\n","var e10 = Math.sqrt(50),\n    e5 = Math.sqrt(10),\n    e2 = Math.sqrt(2);\n\nexport default function(start, stop, count) {\n  var reverse,\n      i = -1,\n      n,\n      ticks,\n      step;\n\n  stop = +stop, start = +start, count = +count;\n  if (start === stop && count > 0) return [start];\n  if (reverse = stop < start) n = start, start = stop, stop = n;\n  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];\n\n  if (step > 0) {\n    start = Math.ceil(start / step);\n    stop = Math.floor(stop / step);\n    ticks = new Array(n = Math.ceil(stop - start + 1));\n    while (++i < n) ticks[i] = (start + i) * step;\n  } else {\n    start = Math.floor(start * step);\n    stop = Math.ceil(stop * step);\n    ticks = new Array(n = Math.ceil(start - stop + 1));\n    while (++i < n) ticks[i] = (start - i) / step;\n  }\n\n  if (reverse) ticks.reverse();\n\n  return ticks;\n}\n\nexport function tickIncrement(start, stop, count) {\n  var step = (stop - start) / Math.max(0, count),\n      power = Math.floor(Math.log(step) / Math.LN10),\n      error = step / Math.pow(10, power);\n  return power >= 0\n      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)\n      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);\n}\n\nexport function tickStep(start, stop, count) {\n  var step0 = Math.abs(stop - start) / Math.max(0, count),\n      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),\n      error = step0 / step1;\n  if (error >= e10) step1 *= 10;\n  else if (error >= e5) step1 *= 5;\n  else if (error >= e2) step1 *= 2;\n  return stop < start ? -step1 : step1;\n}\n","import count from \"../count.js\";\n\nexport default function(values) {\n  return Math.ceil(Math.log(count(values)) / Math.LN2) + 1;\n}\n","import {slice} from \"./array.js\";\nimport bisect from \"./bisect.js\";\nimport constant from \"./constant.js\";\nimport extent from \"./extent.js\";\nimport identity from \"./identity.js\";\nimport range from \"./range.js\";\nimport {tickStep} from \"./ticks.js\";\nimport sturges from \"./threshold/sturges.js\";\n\nexport default function() {\n  var value = identity,\n      domain = extent,\n      threshold = sturges;\n\n  function histogram(data) {\n    if (!Array.isArray(data)) data = Array.from(data);\n\n    var i,\n        n = data.length,\n        x,\n        values = new Array(n);\n\n    for (i = 0; i < n; ++i) {\n      values[i] = value(data[i], i, data);\n    }\n\n    var xz = domain(values),\n        x0 = xz[0],\n        x1 = xz[1],\n        tz = threshold(values, x0, x1);\n\n    // Convert number of thresholds into uniform thresholds.\n    if (!Array.isArray(tz)) {\n      tz = tickStep(x0, x1, tz);\n      tz = range(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive\n    }\n\n    // Remove any thresholds outside the domain.\n    var m = tz.length;\n    while (tz[0] <= x0) tz.shift(), --m;\n    while (tz[m - 1] > x1) tz.pop(), --m;\n\n    var bins = new Array(m + 1),\n        bin;\n\n    // Initialize bins.\n    for (i = 0; i <= m; ++i) {\n      bin = bins[i] = [];\n      bin.x0 = i > 0 ? tz[i - 1] : x0;\n      bin.x1 = i < m ? tz[i] : x1;\n    }\n\n    // Assign data to bins by value, ignoring any outside the domain.\n    for (i = 0; i < n; ++i) {\n      x = values[i];\n      if (x0 <= x && x <= x1) {\n        bins[bisect(tz, x, 0, m)].push(data[i]);\n      }\n    }\n\n    return bins;\n  }\n\n  histogram.value = function(_) {\n    return arguments.length ? (value = typeof _ === \"function\" ? _ : constant(_), histogram) : value;\n  };\n\n  histogram.domain = function(_) {\n    return arguments.length ? (domain = typeof _ === \"function\" ? _ : constant([_[0], _[1]]), histogram) : domain;\n  };\n\n  histogram.thresholds = function(_) {\n    return arguments.length ? (threshold = typeof _ === \"function\" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;\n  };\n\n  return histogram;\n}\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","export default function min(values, valueof) {\n  let min;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\n\n// Based on https://github.com/mourner/quickselect\n// ISC license, Copyright 2018 Vladimir Agafonkin.\nexport default function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {\n  while (right > left) {\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const m = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\n      const newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(array, k, newLeft, newRight, compare);\n    }\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    swap(array, left, k);\n    if (compare(array[right], t) > 0) swap(array, left, right);\n\n    while (i < j) {\n      swap(array, i, j), ++i, --j;\n      while (compare(array[i], t) < 0) ++i;\n      while (compare(array[j], t) > 0) --j;\n    }\n\n    if (compare(array[left], t) === 0) swap(array, left, j);\n    else ++j, swap(array, j, right);\n\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n  return array;\n}\n\nfunction swap(array, i, j) {\n  const t = array[i];\n  array[i] = array[j];\n  array[j] = t;\n}\n","export default function(x) {\n  return x === null ? NaN : +x;\n}\n\nexport function* numbers(values, valueof) {\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        yield value;\n      }\n    }\n  }\n}\n","import max from \"./max.js\";\nimport min from \"./min.js\";\nimport quickselect from \"./quickselect.js\";\nimport number, {numbers} from \"./number.js\";\n\nexport default function quantile(values, p, valueof) {\n  values = Float64Array.from(numbers(values, valueof));\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return min(values);\n  if (p >= 1) return max(values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),\n      value1 = min(values.subarray(i0 + 1));\n  return value0 + (value1 - value0) * (i - i0);\n}\n\nexport function quantileSorted(values, p, valueof = number) {\n  if (!(n = values.length)) return;\n  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);\n  if (p >= 1) return +valueof(values[n - 1], n - 1, values);\n  var n,\n      i = (n - 1) * p,\n      i0 = Math.floor(i),\n      value0 = +valueof(values[i0], i0, values),\n      value1 = +valueof(values[i0 + 1], i0 + 1, values);\n  return value0 + (value1 - value0) * (i - i0);\n}\n","import count from \"../count.js\";\nimport quantile from \"../quantile.js\";\n\nexport default function(values, min, max) {\n  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3)));\n}\n","import count from \"../count.js\";\nimport deviation from \"../deviation.js\";\n\nexport default function(values, min, max) {\n  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)));\n}\n","export default function maxIndex(values, valueof) {\n  let max;\n  let maxIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value, maxIndex = index;\n      }\n    }\n  }\n  return maxIndex;\n}\n","export default function mean(values, valueof) {\n  let count = 0;\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {\n        ++count, sum += value;\n      }\n    }\n  }\n  if (count) return sum / count;\n}\n","import quantile from \"./quantile.js\";\n\nexport default function(values, valueof) {\n  return quantile(values, 0.5, valueof);\n}\n","function* flatten(arrays) {\n  for (const array of arrays) {\n    yield* array;\n  }\n}\n\nexport default function merge(arrays) {\n  return Array.from(flatten(arrays));\n}\n","export default function minIndex(values, valueof) {\n  let min;\n  let minIndex = -1;\n  let index = -1;\n  if (valueof === undefined) {\n    for (const value of values) {\n      ++index;\n      if (value != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  } else {\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (min > value || (min === undefined && value >= value))) {\n        min = value, minIndex = index;\n      }\n    }\n  }\n  return minIndex;\n}\n","export default function pairs(values, pairof = pair) {\n  const pairs = [];\n  let previous;\n  let first = false;\n  for (const value of values) {\n    if (first) pairs.push(pairof(previous, value));\n    previous = value;\n    first = true;\n  }\n  return pairs;\n}\n\nexport function pair(a, b) {\n  return [a, b];\n}\n","export default function(source, keys) {\n  return Array.from(keys, key => source[key]);\n}\n","import ascending from \"./ascending.js\";\n\nexport default function least(values, compare = ascending) {\n  let min;\n  let defined = false;\n  if (compare.length === 1) {\n    let minValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, minValue) < 0\n          : ascending(value, value) === 0) {\n        min = element;\n        minValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, min) < 0\n          : compare(value, value) === 0) {\n        min = value;\n        defined = true;\n      }\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\nimport minIndex from \"./minIndex.js\";\n\nexport default function leastIndex(values, compare = ascending) {\n  if (compare.length === 1) return minIndex(values, compare);\n  let minValue;\n  let min = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (min < 0\n        ? compare(value, value) === 0\n        : compare(value, minValue) < 0) {\n      minValue = value;\n      min = index;\n    }\n  }\n  return min;\n}\n","import ascending from \"./ascending.js\";\n\nexport default function greatest(values, compare = ascending) {\n  let max;\n  let defined = false;\n  if (compare.length === 1) {\n    let maxValue;\n    for (const element of values) {\n      const value = compare(element);\n      if (defined\n          ? ascending(value, maxValue) > 0\n          : ascending(value, value) === 0) {\n        max = element;\n        maxValue = value;\n        defined = true;\n      }\n    }\n  } else {\n    for (const value of values) {\n      if (defined\n          ? compare(value, max) > 0\n          : compare(value, value) === 0) {\n        max = value;\n        defined = true;\n      }\n    }\n  }\n  return max;\n}\n","import ascending from \"./ascending.js\";\nimport maxIndex from \"./maxIndex.js\";\n\nexport default function greatestIndex(values, compare = ascending) {\n  if (compare.length === 1) return maxIndex(values, compare);\n  let maxValue;\n  let max = -1;\n  let index = -1;\n  for (const value of values) {\n    ++index;\n    if (max < 0\n        ? compare(value, value) === 0\n        : compare(value, maxValue) > 0) {\n      maxValue = value;\n      max = index;\n    }\n  }\n  return max;\n}\n","import leastIndex from \"./leastIndex.js\";\n\nexport default function scan(values, compare) {\n  const index = leastIndex(values, compare);\n  return index < 0 ? undefined : index;\n}\n","export default function shuffle(array, i0 = 0, i1 = array.length) {\n  var m = i1 - (i0 = +i0),\n      t,\n      i;\n\n  while (m) {\n    i = Math.random() * m-- | 0;\n    t = array[m + i0];\n    array[m + i0] = array[i + i0];\n    array[i + i0] = t;\n  }\n\n  return array;\n}\n","export default function sum(values, valueof) {\n  let sum = 0;\n  if (valueof === undefined) {\n    for (let value of values) {\n      if (value = +value) {\n        sum += value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if (value = +valueof(value, ++index, values)) {\n        sum += value;\n      }\n    }\n  }\n  return sum;\n}\n","import min from \"./min.js\";\n\nexport default function(matrix) {\n  if (!(n = matrix.length)) return [];\n  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {\n    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {\n      row[j] = matrix[j][i];\n    }\n  }\n  return transpose;\n}\n\nfunction length(d) {\n  return d.length;\n}\n","import transpose from \"./transpose.js\";\n\nexport default function() {\n  return transpose(arguments);\n}\n","export {default as bisect, bisectRight, bisectLeft} from \"./bisect.js\";\nexport {default as ascending} from \"./ascending.js\";\nexport {default as bisector} from \"./bisector.js\";\nexport {default as count} from \"./count.js\";\nexport {default as cross} from \"./cross.js\";\nexport {default as cumsum} from \"./cumsum.js\";\nexport {default as descending} from \"./descending.js\";\nexport {default as deviation} from \"./deviation.js\";\nexport {default as extent} from \"./extent.js\";\nexport {default as group, groups, rollup, rollups} from \"./group.js\";\nexport {default as bin, default as histogram} from \"./bin.js\"; // Deprecated; use bin.\nexport {default as thresholdFreedmanDiaconis} from \"./threshold/freedmanDiaconis.js\";\nexport {default as thresholdScott} from \"./threshold/scott.js\";\nexport {default as thresholdSturges} from \"./threshold/sturges.js\";\nexport {default as max} from \"./max.js\";\nexport {default as maxIndex} from \"./maxIndex.js\";\nexport {default as mean} from \"./mean.js\";\nexport {default as median} from \"./median.js\";\nexport {default as merge} from \"./merge.js\";\nexport {default as min} from \"./min.js\";\nexport {default as minIndex} from \"./minIndex.js\";\nexport {default as pairs} from \"./pairs.js\";\nexport {default as permute} from \"./permute.js\";\nexport {default as quantile, quantileSorted} from \"./quantile.js\";\nexport {default as quickselect} from \"./quickselect.js\";\nexport {default as range} from \"./range.js\";\nexport {default as least} from \"./least.js\";\nexport {default as leastIndex} from \"./leastIndex.js\";\nexport {default as greatest} from \"./greatest.js\";\nexport {default as greatestIndex} from \"./greatestIndex.js\";\nexport {default as scan} from \"./scan.js\"; // Deprecated; use leastIndex.\nexport {default as shuffle} from \"./shuffle.js\";\nexport {default as sum} from \"./sum.js\";\nexport {default as ticks, tickIncrement, tickStep} from \"./ticks.js\";\nexport {default as transpose} from \"./transpose.js\";\nexport {default as variance} from \"./variance.js\";\nexport {default as zip} from \"./zip.js\";\n","import airports from './airports.json';\nimport { extent } from 'd3-array';\n\n// Orthographic projection\n\nfunction project(lon, lat) {\n  const azimuth = lon * (Math.PI / 180);\n  const inclination = Math.PI / 2 - lat * (Math.PI / 180);\n\n  const x = Math.sin(inclination) * Math.cos(azimuth);\n  const y = Math.sin(inclination) * Math.sin(azimuth);\n  const z = Math.cos(inclination);\n\n  if (x < 0) return false;\n\n  return new Float32Array([y, z]);\n}\n\nconsole.log(\n  'lon extent',\n  extent(airports, d => d[0]),\n);\nconsole.log(\n  'lat extent',\n  extent(airports, d => d[1]),\n);\n\nexport function compute_flight_paths(buffer) {\n  const array = new Uint16Array(buffer);\n\n  let vertices = [];\n\n  for (let i = 0; i < array.length; i += 3) {\n    const [from_lon, from_lat, from_china] = airports[array[i]];\n    const [to_lon, to_lat, to_china] = airports[array[i + 1]];\n    const count = array[i + 2];\n    // vertices.push(...project(from_lon, from_lat), ...project(to_lon, to_lat));\n  }\n\n  vertices = [];\n  let fromChina = [];\n  airports.forEach(([lon, lat, from_china]) => {\n    const a = project(lon, lat);\n    if (a) {\n      vertices.push(...a);\n      fromChina.push(from_china);\n    }\n  });\n\n  return { vertices: new Float32Array(vertices), fromChina };\n}\n\nexport function compute_vertices(buffer) {\n  // First uint32 (4 bytes) contain the number of line strings.\n  const count = new Uint32Array(buffer, 0, 1)[0];\n  // Each of the next `count` uint32s stores the vertex count of a line string.\n  const indices = new Uint32Array(buffer, 4, count);\n  // Rest of bytes contain vertex coordinates (alternating long-lat pairs)\n  const coords = new Float32Array(buffer, 4 * (indices.length + 1));\n\n  const vertices = [];\n  let v = 0;\n\n  for (let i = 0; i < indices.length; i += 1) {\n    const len = indices[i];\n\n    let a = project(coords[v++], coords[v++]);\n\n    for (let j = 1; j < len; j += 1) {\n      const b = project(coords[v++], coords[v++]);\n\n      if (!a || !b) continue;\n\n      vertices.push(...a, ...b);\n\n      a = b;\n    }\n  }\n\n  return new Float32Array(vertices);\n}\n","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nvarying vec2 v_position;\\nvarying float v_fromChina;\\n\\nvoid main() {\\n  gl_FragColor = vec4(v_fromChina, v_fromChina, 0, 1.);\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\n\\nattribute vec2 position;\\nattribute float fromChina;\\n\\nvarying vec2 v_position;\\nvarying float v_fromChina;\\n\\nvoid main() {\\n  v_fromChina = fromChina;\\n  v_position = position;\\n\\n  gl_PointSize = 7.;\\n  gl_Position = vec4(position / aspectRatio, 0, 1);\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nvoid main() {\\n  gl_FragColor = vec4(vec3(230. / 255.), 1.);\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\n\\nattribute vec2 position;\\n\\nvoid main() {\\n  gl_Position = vec4(position / aspectRatio, 0, 1);\\n}\\n\";","module.exports=\"#define PI 3.1415926538\\n\\nprecision mediump float;\\n#define GLSLIFY 1\\n\\nuniform sampler2D landTexture;\\nuniform sampler2D monoTexture;\\nuniform float tick;\\n\\nvarying vec2 v_position;\\n\\nvec3 LIGHT_REVERSED = vec3(-0.5, 0.5, 1);\\nfloat LIGHT_MAG = distance(LIGHT_REVERSED, vec3(0));\\n\\nvoid main() {\\n\\n  // The screen is the tangent plane. Each (x, y) we treat as an\\n  // orthographically projected point of the front-facing hemisphere.\\n  // The textures are equirectangular projections, which means the position of\\n  // an image pixel is just the longitude-latitude.\\n  // For each fragment, then, we must figure out the corresponding lat-long to\\n  // retrieve the correct image pixel.\\n\\n  // 1. Define the projected coordinates.\\n  //    Discard fragments outside the great circle.\\n\\n  float x = v_position.x;\\n  float y = v_position.y;\\n  float c = x * x + y * y; // Distance from center of orthographic projection\\n\\n  if (sqrt(c) > 1.) {\\n    discard;\\n  }\\n\\n  // 2. Invert projection to get spherical coordinates\\n\\n  float depth = sqrt(1. - c);        // Purposefully ignoring negative face\\n  float longitude = atan(x / depth) + PI / 2.; // [-PI / 2, PI / 2]\\n  float latitude = asin(y);          // [-PI / 2, PI / 2]\\n\\n  // 3. Do equirectangular projection to get plane/texture coordinates\\n  //    For longitude: Map to [0.25, 0.75] (center is 0.5, range is 0.5)\\n  //    For latitude: Map to [0, 1] (center is 0.5, range is 0.5)\\n\\n  float texture_x = (longitude + PI) / (2. * PI);\\n  float texture_y = (latitude + PI / 2.) / PI;\\n\\n  // 4. Grab texture colors. Black = land, white = no land.\\n\\n  vec2 texture_position = vec2(texture_x, texture_y);\\n  vec3 texture_color = texture2D(landTexture, texture_position).rgb;\\n  vec3 mono_color = texture2D(monoTexture, texture_position).rgb;\\n\\n  texture_color += vec3(240. / 255.) * mono_color;\\n\\n  // 5. Calculate lighting.\\n\\n  float dotted = dot(vec3(x, y, depth), LIGHT_REVERSED) / LIGHT_MAG;\\n  float light = sign(dotted) * pow(dotted, 1.2);\\n  light = min(1.0, 0.55 + light * 0.3);\\n\\n  gl_FragColor = vec4(texture_color, 1.);\\n  gl_FragColor.rgb *= light;\\n}\\n\";","module.exports=\"precision mediump float;\\n#define GLSLIFY 1\\n\\nuniform vec2 aspectRatio;\\n\\nattribute vec2 position;\\n\\nvarying vec2 v_position;\\n\\nvoid main() {\\n  // For some reason textures only cover the first quadrant of the clip space.\\n  // Remember that v_position should become the coordinate of the texture in\\n  // clip space. Cutting position in half means that (1, 1) in the clip space\\n  // becomes (0.5, 0.5) on the texture.\\n  // two quadrants' worth of space.\\n  // Adding 0.5 to position means that (1, 1) in the clip space becomes (1, 1)\\n  // on the texture, and similarly (0, 0) -> (0.5, 0.5) (the texture's center)\\n  // and (-1, -1) -> (0, 0).\\n\\n  // v_position = 0.5 + position * 0.5;\\n  v_position = position * aspectRatio;\\n\\n  // gl_Position should be position because the position attribute covers the\\n  // whole clip space\\n  gl_Position = vec4(position, 0, 1);\\n}\\n\";","import createREGL from 'regl';\nimport { compute_vertices, compute_flight_paths } from './vertices';\nimport airports from './airports.json';\n\nimport pointsFrag from './shaders/points.frag';\nimport pointsVert from './shaders/points.vert';\nimport borderFrag from './shaders/borders.frag';\nimport borderVert from './shaders/borders.vert';\nimport textureFrag from './shaders/texture.frag';\nimport textureVert from './shaders/texture.vert';\n\nimport spec from './specularity@2x.png';\nimport mono from './mono@2x.png';\n\nconst regl = createREGL();\n\nconst base =\n  'https://static01.nyt.com/newsgraphics/2020/02/04/coronavirus-flights/67d5b188d41684d2a82da11e94e358b4a769735e';\n\nasync function getVertices() {\n  return fetch(`${base}/geometry/borders.dat`)\n    .then(response => response.arrayBuffer())\n    .then(buffer => compute_vertices(buffer));\n}\n\nasync function getTexture(filename) {\n  return new Promise(resolve => {\n    const image = new Image();\n    // image.src = `${base}/textures/${filename}`;\n    image.src = filename;\n    image.crossOrigin = '';\n    image.onload = () => resolve(regl.texture({ data: image, flipY: true }));\n  });\n}\n\nfunction createLineDrawer(vertices) {\n  return regl({\n    frag: borderFrag,\n    vert: borderVert,\n\n    uniforms: { aspectRatio, },\n\n    attributes: { position: vertices },\n\n    count: vertices.length / 2,\n    primitive: 'lines',\n  });\n}\n\nasync function main() {\n  const [borders, landTexture, monoTexture, flights] = await Promise.all([\n    getVertices(),\n    // getTexture('specularity@2x.png'),\n    // getTexture('mono@2x.png'),\n    getTexture(spec),\n    getTexture(mono),\n    getFlights(),\n  ]);\n\n  const drawBorders = createLineDrawer(borders);\n  console.log('flights :>> ', flights);\n  const drawFlights = regl({\n    frag: pointsFrag,\n    vert: pointsVert,\n\n    uniforms: { aspectRatio, },\n\n    attributes: { position: flights.vertices, fromChina: flights.fromChina },\n\n    count: flights.vertices.length / 2,\n    primitive: 'points',\n  })\n\n  const drawTexture = regl({\n    frag: textureFrag,\n    vert: textureVert,\n\n    uniforms: {\n      landTexture,\n      monoTexture,\n      tick: regl.prop('tick'),\n      aspectRatio,\n    },\n\n    attributes: {\n      // Two triangles that cover the whole clip space\n      position: regl.buffer([\n        [-1, 1],\n        [1, -1],\n        [1, 1],\n        [-1, 1],\n        [1, -1],\n        [-1, -1],\n      ]),\n    },\n\n    count: 6,\n  });\n\n  regl.frame(({ tick }) => {\n    regl.clear({\n      color: [0, 0, 0, 0],\n      depth: 1,\n    });\n    drawFlights();\n    drawBorders();\n    drawTexture({ tick });\n  });\n}\n\nasync function getFlights() {\n  return fetch(`${base}/20200123.dat`)\n    .then(response => response.arrayBuffer())\n    .then(buffer => compute_flight_paths(buffer));\n}\n\nmain().catch(console.error);\n\nfunction aspectRatio({ viewportWidth, viewportHeight }) {\n  const ar = viewportWidth / viewportHeight;\n  return ar > 1 ? [ar, 1] : [1, 1 / ar];\n}\n"]}